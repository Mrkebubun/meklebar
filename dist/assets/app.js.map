{
  "version": 3,
  "file": "app.js",
  "sources": [
    "tmp/transpiled/app/app.js",
    "tmp/transpiled/app/components/make_inner.js",
    "tmp/transpiled/app/components/modal-dialog.js",
    "tmp/transpiled/app/components/number-input.js",
    "tmp/transpiled/app/components/validated-input-inner.js",
    "tmp/transpiled/app/components/validated-input.js",
    "tmp/transpiled/app/components/validated-number-input-inner.js",
    "tmp/transpiled/app/components/validated-textarea-input-inner.js",
    "tmp/transpiled/app/components/validation-glyphicon.js",
    "tmp/transpiled/app/controllers/approve.js",
    "tmp/transpiled/app/controllers/redeem.js",
    "tmp/transpiled/app/controllers/send.js",
    "tmp/transpiled/app/helpers/bitcoin.js",
    "tmp/transpiled/app/models/address.js",
    "tmp/transpiled/app/models/bitcoin_service.js",
    "tmp/transpiled/app/models/coin_selector.js",
    "tmp/transpiled/app/models/escrow_out.js",
    "tmp/transpiled/app/models/escrow_transaction.js",
    "tmp/transpiled/app/models/redemption_input.js",
    "tmp/transpiled/app/models/redemption_tx.js",
    "tmp/transpiled/app/models/signature.js",
    "tmp/transpiled/app/router.js",
    "tmp/transpiled/app/routes/application.js",
    "tmp/transpiled/app/routes/approve.js",
    "tmp/transpiled/app/routes/redeem.js",
    "tmp/transpiled/app/routes/send.js",
    "tmp/transpiled/app/utils/register_components.js",
    "tmp/transpiled/app/views/nav.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACvjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K",
  "sourcesContent": [
    "define(\"meklebar/app\",\n  [\"resolver\",\"meklebar/utils/register_components\",\"meklebar/helpers/bitcoin\"],\n  function(Resolver, registerComponents, _) {\n    \"use strict\";\n\n\n    var App = Ember.Application.extend({\n      LOG_ACTIVE_GENERATION: true,\n      LOG_MODULE_RESOLVER: true,\n      LOG_TRANSITIONS: true,\n      LOG_TRANSITIONS_INTERNAL: true,\n      LOG_VIEW_LOOKUPS: true,\n      modulePrefix: 'meklebar',\n      Resolver: Resolver\n    });\n\n    App.initializer({\n      name: 'Register Components',\n      initialize: function(container, application) {\n        registerComponents(container);\n      }\n    });\n\n\n    return App;\n  });",
    "define(\"meklebar/components/make_inner\",\n  [],\n  function() {\n    \"use strict\";\n    var makeInner = function(klass, additional) {\n      var instance = klass.create();\n      var attrs = instance.attributeBindings;\n      var attrMap = {};\n\n      attrs.concat(additional).forEach(function(attr) {\n        if (attr === \"type\") return;\n        attrMap[attr] = Ember.computed.alias('parentView.' + attr);\n      });\n\n      return klass.extend(attrMap);\n    };\n\n\n    return makeInner;\n  });",
    "define(\"meklebar/components/modal-dialog\",\n  [],\n  function() {\n    \"use strict\";\n    var ModalDialog = Ember.Component.extend({\n      actions: {\n        close: function() {\n          this.container.lookup('route:application').send('closeModal');\n        }\n      }\n    });\n\n\n    return ModalDialog;\n  });",
    "define(\"meklebar/components/number-input\",\n  [],\n  function() {\n    \"use strict\";\n    var NumberInput = Ember.TextField.extend({\n      type: 'number',\n      attributeBindings: ['min', 'max', 'step']\n    });\n\n\n    return NumberInput;\n  });",
    "define(\"meklebar/components/validated-input-inner\",\n  [\"meklebar/components/make_inner\"],\n  function(makeInner) {\n    \"use strict\";\n\n    var ValidatedInputInner = makeInner(Ember.TextField);\n\n\n    return ValidatedInputInner;\n  });",
    "define(\"meklebar/components/validated-input\",\n  [],\n  function() {\n    \"use strict\";\n    var ValidatedInput = Ember.Component.extend({\n      classNameBindings: ['hasError', ':form-group'],\n      label: null,\n      value: null,\n      valid: null,\n      focusedIn: false,\n      focusedOut: false,\n      comp: '',\n      'input-cols': '7',\n\n      inputColClass: function() {\n        return 'col-lg-' + this.get('input-cols');\n      }.property('input-cols'),\n\n      compView: function() {\n        var comp = this.get('comp');\n        var name;\n\n        if (Ember.isEmpty(comp)) {\n          name = 'validated-input-inner';\n        } else {\n          name = 'validated-' + comp + '-input-inner';\n        }\n\n        return App.__container__.lookup('component:' + name);\n      }.property('comp'),\n\n      invalid: Ember.computed.not('valid'),\n      focusedInvalid: Ember.computed.and('focusedIn', 'invalid'),\n      hasError: Ember.computed.and('focusedOut', 'invalid'),\n\n      focusIn: function() {\n        this.set('focusedIn', true);\n      },\n\n      focusOut: function() {\n        this.set('focusedOut', true);\n      }\n    });\n\n\n    return ValidatedInput;\n  });",
    "define(\"meklebar/components/validated-number-input-inner\",\n  [\"meklebar/components/make_inner\",\"meklebar/components/number-input\"],\n  function(makeInner, NumberInput) {\n    \"use strict\";\n\n    var ValidatedNumberInputInner = makeInner(NumberInput);\n\n\n    return ValidatedNumberInputInner;\n  });",
    "define(\"meklebar/components/validated-textarea-input-inner\",\n  [\"meklebar/components/make_inner\"],\n  function(makeInner) {\n    \"use strict\";\n\n    var ValidatedTextAreaInputInner = makeInner(Ember.TextArea, ['value']);\n\n\n    return ValidatedTextAreaInputInner;\n  });",
    "define(\"meklebar/components/validation-glyphicon\",\n  [],\n  function() {\n    \"use strict\";\n    var ValidationGlyphicon = Ember.Component.extend({\n      tagName: 'span',\n      condition: null,\n      classNameBindings: ['condition:glyphicon-ok:glyphicon-remove', ':glyphicon']\n    });\n\n\n    return ValidationGlyphicon;\n  });",
    "define(\"meklebar/controllers/approve\",\n  [],\n  function() {\n    \"use strict\";\n    var ApproveController = Ember.ObjectController.extend({\n      actions: {\n        sign: function() {\n          if (!this.get('signature.valid')) return;\n\n          this.set('showSignature', true);\n        },\n\n        reset: function() {\n          this.setProperties({ code: null, showSignature: false });\n        }\n      },\n\n      code: '',\n\n      codeData: function() {\n        var code = this.get('code');\n        if (Ember.isEmpty(code)) return;\n\n        var data = atob(code.trim()).split(':');\n        if (data.length !== 2 || data[0].length !== 64) return;\n\n        return { txHash: data[0], redeemAddr: data[1] };\n      }.property('code'),\n\n      codeValid: Ember.computed.notEmpty('codeData'),\n      hasDetails: Ember.computed.and('amount', 'address'),\n\n      codeDataChnaged: function() {\n        var data = this.get('codeData') || {};\n\n        this.set('inputHash', data.txHash);\n        this.set('address', data.redeemAddr);\n      }.observes('codeData'),\n\n      signature: function() {\n        return this.get('model').createSignature();\n      }.property('hashForSignature', 'bytePubKeys'),\n\n      blockchainUrl: function() {\n        var hash = this.get('inputHash');\n        if (Ember.isEmpty(hash)) return;\n\n        return 'http://blockchain.info/tx/' + hash;\n      }.property('inputHash')\n    });\n\n\n    return ApproveController;\n  });",
    "define(\"meklebar/controllers/redeem\",\n  [],\n  function() {\n    \"use strict\";\n    var RedeemController = Ember.ObjectController.extend({\n      actions: {\n        redeem: function() {\n          if (!this.get('model.validRequest') || !confirm('Are you sure?')) return;\n\n          var self = this;\n          this.set('error', null);\n          this.set('sendingTx', true);\n\n          this.get('model').sendTx().then(function() {\n            self.set('sendingTx', false);\n            self.set('pushSuccess', true);\n          }, function(error) {\n            self.set('sendingTx', false);\n            self.set('error', error.resp + ' (' + error.code + ')');\n          });\n        },\n\n        reset: function() {\n          this.set('pushSuccess', null);\n          this.setProperties({ inputHash: '', address: '' });\n        }\n      },\n\n      pushSuccess: null,\n      error: null,\n      sendingTx: null,\n\n      invalidRequest: Ember.computed.not('validRequest'),\n      redeemDisabled: Ember.computed.or('invalidRequest', 'sendingTx')\n    });\n\n\n    return RedeemController;\n  });",
    "define(\"meklebar/controllers/send\",\n  [],\n  function() {\n    \"use strict\";\n    var SendController = Ember.ObjectController.extend({\n      actions: {\n        sendTx: function() {\n          if (!this.get('model.validTx') || !confirm('Are you sure?')) return;\n\n          var self = this;\n          this.set('error', null);\n          this.set('sendingTx', true);\n\n          this.get('model').sendTx().then(function() {\n            self.set('sendingTx', false);\n            self.set('pushSuccess', true);\n          }, function(reason) {\n            self.set('sendingTx', false);\n            self.set('error', reason);\n          });\n        },\n\n        reset: function() {\n          this.set('pushSuccess', null);\n          this.set('model.amountBTC', '0.0');\n          this.set('model.source.priv', '');\n          this.set('model.receiver.pubKeyOrAddress', '');\n          this.set('model.mediator.pubKeyOrAddress', '');\n        }\n      },\n\n      pushSuccess: null,\n      error: null,\n      sendingTx: null,\n\n      invalidTx: Ember.computed.not('validTx'),\n      sendDisabled: Ember.computed.or('invalidTx', 'sendingTx')\n    });\n\n\n    return SendController;\n  });",
    "define(\"meklebar/helpers/bitcoin\",\n  [],\n  function() {\n    \"use strict\";\n    Ember.Handlebars.helper('btcValue', function(satoshis) {\n      if (typeof satoshis !== 'string') satoshis = '' + satoshis;\n      return Bitcoin.Util.formatValue(satoshis);\n    });\n\n  });",
    "define(\"meklebar/models/address\",\n  [\"meklebar/models/bitcoin_service\"],\n  function(BitcoinService) {\n    \"use strict\";\n\n    var Address = Ember.Object.extend({\n      priv: null,\n\n      privValidLength: Ember.computed.equal('priv.length', 51),\n      privValid: Ember.computed.alias('privValidLength'),\n\n      validSender: Ember.computed.alias('privValid'),\n      validParty: Ember.computed.and('address', 'pubkey'),\n\n      addrValid: Ember.computed.equal('address.length', 34),\n\n      eckey: function() {\n        if (!this.get('privValid')) return;\n        return new Bitcoin.ECKey(this.get('priv'));\n      }.property('priv'),\n\n      address: function() {\n        if (!this.get('privValid')) return;\n        return this.get('eckey').getBitcoinAddress().toString();\n      }.property('privValid', 'eckey'),\n\n      addr: function() {\n        return new Bitcoin.Address(this.get('address'));\n      }.property('address'),\n\n      unspent: null,\n\n      balance: function() {\n        var unspent = this.get('unspent');\n        if (!unspent) return 0;\n        return unspent.reduce(function(memo, item) {\n          return memo + item.value;\n        }, 0);\n      }.property('unspent.@each.value'),\n\n      balanceBTC: function() {\n        return Bitcoin.Util.formatValue(this.get('balance'));\n      }.property('balance'),\n\n      pubkey: function(key, value) {\n        if (arguments.length === 1) {\n          if (this._pubkey) return this._pubkey;\n\n          var privValid = this.get('privValid');\n          var eckey = this.get('eckey');\n          if (!privValid || !eckey) return;\n\n          this._pubkey = Crypto.util.bytesToHex(eckey.getPub());\n\n          return this._pubkey;\n        } else {\n          this._pubkey = value;\n\n          if (value && value.length > 0) {\n            this.set('address', Bitcoin.Address.fromPubKey(value).toString());\n          }\n\n          return value;\n        }\n      }.property('privValid', 'eckey'),\n\n      pubKeyOrAddress: function(key, value) {\n        if (arguments.length === 1) {\n          return this._pkad;\n        } else {\n          if (value.length === 34) {\n            this.set('address', value);\n          } else if (value.length === 130) {\n            this.set('pubkey', value);\n          } else {\n            this.set('address', '');\n            this.set('pubkey', '');\n          }\n\n          return this._pkad = value;\n        }\n      }.property(),\n\n      pkoaAddress: Ember.computed.equal('pubKeyOrAddress.length', 34),\n      pkoaPubKey: Ember.computed.equal('pubKeyOrAddress.length', 130),\n\n      noAddrNoPub: Ember.computed.not('validParty'),\n      noPub: Ember.computed.empty('pubkey'),\n      addrNoPub: Ember.computed.and('address', 'noPub'),\n\n      getUnspent: function() {\n        var addr = this.get('address');\n        var self = this;\n        // don't get unspent inputs if there is no address or private key on file\n        if (!this.get('addrValid') || !this.get('privValid')) return this.set('unspent', []);\n\n        BitcoinService.unspentInputsForAddress(addr).then(function(ar) {\n          self.set('unspent', ar);\n        });\n      }.on('init').observes('address'),\n\n      getPubkey: function() {\n        var addr = this.get('address');\n        var self = this;\n        if (!this.get('addrValid') || this._pubkey) return;\n\n        BitcoinService.pubKeyForAddress(addr).then(function(pk) {\n          self.set('pubkey', pk);\n        });\n      }.observes('address')\n    });\n\n\n    return Address;\n  });",
    "define(\"meklebar/models/bitcoin_service\",\n  [],\n  function() {\n    \"use strict\";\n    var BitcoinService = Ember.Object.extend();\n\n    BitcoinService.reopenClass({\n      pubKeyForAddress: function(address) {\n        var url = 'https://blockchain.info/q/pubkeyaddr/' + address + '?cors=true';\n        return $.ajax(url).then(function(data) {\n          if (data.length === 130) return data;\n        }, function(xhr) {\n          return xhr.responseText;\n        });\n      },\n\n      unspentInputsForAddress: function(address) {\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n          var url = 'https://blockchain.info/unspent?cors=true&address=' + address;\n          $.ajax(url).then(function(data) {\n            resolve(data.unspent_outputs || []);\n          }, function(xhr, status) {\n            if (xhr.responseText === \"No free outputs to spend\") {\n              resolve([]);\n            } else {\n              reject(xhr.responseText);\n            }\n          });\n        });\n      },\n\n      pushTx: function(hexTx) {\n        var url = 'https://blockchain.info/pushtx?cors=true';\n        return $.ajax(url, { type: 'POST', data: { tx: hexTx } }).then(undefined, function(xhr) {\n          return xhr.responseText;\n        });\n      },\n\n      pushMultisigTx: function(hexTx) {\n        // blockchain.info doesn't sent transactions that spend multisig input for\n        // some weird reason - https://github.com/blockchain/My-Wallet/issues/41\n        // coinbin's API isn't public and it may break any time. this method needs\n        // to be updated when #41 gets fixed or when someone finds a web API for\n        // pushing tx's that supports multisig. FIXME\n\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n          var url = 'https://coinb.in/api/';\n          var uid = '1';\n          var key = '12345678901234567890123456789012';\n\n          var data = 'uid='+uid+'&key='+key+'&setmodule=bitcoin&request=sendrawtransaction&rawtx='+hexTx;\n\n          return $.ajax(url + '?' + data).then(function(data) {\n            var code = data.getElementsByTagName(\"result\")[0].childNodes[0].nodeValue;\n            code = parseInt(code, 10);\n            var resp = data.getElementsByTagName(\"response\")[0].childNodes[0].nodeValue;\n            resp = decodeURIComponent(resp).replace(/\\+/g, ' ');\n\n            // it's weird. coinbin responses with this error message when actually\n            // the transaction went through seccessfully\n            if (code === 0 && resp === \"unexpected error, try again in a moment\") {\n              resolve();\n            } else {\n              reject({ code: code, resp: resp });\n            }\n          });\n        });\n      },\n\n      txFromHash: function(hash) {\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n          var url = 'http://www.corsproxy.com/blockexplorer.com/rawtx/' + hash;\n          $.get(url, function(data) {\n            resolve(JSON.parse(data));\n          });\n        });\n      },\n\n      blockchainTxUrl: function(hash) {\n        return 'https://blockchain.info/tx/' + hash;\n      }\n    });\n\n\n    return BitcoinService;\n  });",
    "define(\"meklebar/models/coin_selector\",\n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var simpleCoinSelector = function(target, inputs) {\n      var sorted = inputs.sort(function(a, b) {\n        return b.confirmations - a.confirmations;\n      });\n\n      var selected = [];\n      var total = 0;\n\n      inputs.forEach(function(input) {\n        console.log('processing', input);\n        if (total >= target) return;\n        selected.push(input);\n        total += input.value;\n      });\n\n      return [selected, total - target];\n    };\n\n\n    __exports__.simpleCoinSelector = simpleCoinSelector;\n  });",
    "define(\"meklebar/models/escrow_out\",\n  [],\n  function() {\n    \"use strict\";\n    var EscrowOut = Ember.Object.extend({\n      data: null,\n\n      amount: Ember.computed.alias('data.value'),\n\n      scriptTokens: function() {\n        var data = this.get('data');\n        return data.scriptPubKey.split(' ');\n      }.property('data.scriptPubKey'),\n\n      signaturesNeeded: function() {\n        var tokens = this.get('scriptTokens');\n        return parseInt(tokens[0], 10);\n      }.property('scriptTokens'),\n\n      signers: function() {\n        var tokens = this.get('scriptTokens');\n        return tokens.slice(1, tokens.length - 2);\n      }.property('scriptTokens'),\n\n      numSigners: Ember.computed.alias('signers.length'),\n\n      txIn: function() {\n        var data = this.get('data');\n\n        return Bitcoin.TransactionIn.fromJSON({\n          tx_hash: data.hash,\n          tx_output_n: data.index,\n          script: data.scriptPubKey\n        }, true);\n      }.property('data.hash', 'data.index', 'data.scriptPubKey')\n    });\n\n\n    return EscrowOut;\n  });",
    "define(\"meklebar/models/escrow_transaction\",\n  [\"meklebar/models/coin_selector\",\"meklebar/models/bitcoin_service\"],\n  function(__dependency1__, BitcoinService) {\n    \"use strict\";\n    var simpleCoinSelector = __dependency1__.simpleCoinSelector;\n\n    var EscrowTransaction = Ember.Object.extend({\n      source: null,\n      mediator: null,\n      receiver: null,\n      amountBTC: \"0.0\",\n\n      eckey: Ember.computed.alias('source.eckey'),\n\n      amount: function() {\n        return Bitcoin.Util.parseValue(this.get('amountBTC'));\n      }.property('amountBTC'),\n\n      fee: function() {\n        return Bitcoin.Util.parseValue('0.0005');\n      }.property('feeBTC'),\n\n      interAmount: function() {\n        return this.get('amount').add(this.get('fee')); // amount + redemption fee\n      }.property('amount', 'fee'),\n\n      totalAmount: function() {\n        return this.get('interAmount').add(this.get('fee')); // intermediate amount + sending fee\n      }.property('interAmount', 'fee'),\n\n      enoughMoney: function() {\n        var total = this.get('totalAmount').intValue();\n        var balance = this.get('source.balance');\n\n        return balance >= total;\n      }.property('totalAmount', 'source.balance'),\n\n      moreThanMin: function() {\n        var total = this.get('totalAmount').intValue();\n\n        return total > 1000000; // more than 0.01 BTC\n      }.property('totalAmount'),\n\n      validAmount: Ember.computed.and('moreThanMin', 'enoughMoney'),\n\n      inputs: function() {\n        var target = this.get('totalAmount').intValue();\n        var inputs = this.get('source.unspent').slice(0);\n\n        return simpleCoinSelector(target, inputs);\n      }.property('totalAmount', 'source.unspent.@each'),\n\n      inputTxs: function() {\n        var _inputs = this.get('inputs');\n        var inputs = _inputs[0];\n\n        return inputs.map(function(input) {\n          return Bitcoin.TransactionIn.fromJSON(input, false, true);\n        });\n      }.property('inputs.@each'),\n\n      txAmountBytes: function() {\n        return Bitcoin.Util.amountToBytes(this.get('interAmount'));\n      }.property('interAmount'),\n\n      escrowTx: function() {\n        var value = this.get('txAmountBytes');\n        var self = this;\n\n        var pubkeys = ['source', 'mediator', 'receiver'].map(function(p) {\n          return Crypto.util.hexToBytes(self.get(p).get('pubkey'));\n        });\n\n        return new Bitcoin.TransactionOut({\n          value: value,\n          script: Bitcoin.Script.createMultiSigOutputScript(2, pubkeys)\n        });\n      }.property('txAmountBytes', 'source.pubkey', 'mediator.pubkey', 'receiver.pubkey'),\n\n      changeAmountBytes: function() {\n        return Bitcoin.Util.amountToBytes(this.get('inputs')[1]);\n      }.property('inputs.@each'),\n\n      changeTx: function() {\n        var change = this.get('inputs')[1];\n        if (change <= 0) return;\n\n        var value = this.get('changeAmountBytes');\n        var sourceAddr = this.get('source.addr');\n\n        return new Bitcoin.TransactionOut({\n          value: value,\n          script: Bitcoin.Script.createOutputScript(sourceAddr)\n        });\n      }.property('inputs.@each', 'changeAmountBytes', 'source.addr'),\n\n      tx: function() {\n        var change = this.get('inputs')[1];\n\n        var tx = new Bitcoin.Transaction();\n        var eckey = this.get('eckey');\n\n        tx.addInputs(this.get('inputTxs'));\n\n        var escrowTx = this.get('escrowTx');\n        tx.addOutput(escrowTx);\n\n        var changeTx = this.get('changeTx');\n        if (changeTx) tx.addOutput(changeTx);\n\n        tx.ins.forEach(function(input, index) {\n          input.simpleSignScript(eckey, tx, index);\n        });\n\n        return tx;\n      }.property('eckey', 'inputs.@each', 'inputTxs.@each', 'escrowTx', 'changeTx'),\n\n      validTx: Ember.computed.and('validAmount', 'source.validSender', 'mediator.validParty', 'receiver.validParty'),\n\n      hash: function() {\n        if (!this.get('validTx')) return;\n\n        var tx = this.get('tx');\n        return Crypto.util.bytesToHex(tx.getHash().reverse());\n      }.property('tx', 'validTx'),\n\n      blockchainUrl: function() {\n        var hash = this.get('hash');\n        if (!hash) return;\n\n        return BitcoinService.blockchainTxUrl(hash);\n      }.property('hash'),\n\n      bbe: function() {\n        var tx = this.get('tx');\n        if (!tx) return;\n\n        var res = tx.toJSON();\n\n        return JSON.stringify(res, null, 2);\n      }.property('tx'),\n\n      hex: function() {\n        var tx = this.get('tx');\n        if (!tx) return;\n        return tx.hex();\n      }.property('tx'),\n\n      sendTx: function() {\n        return BitcoinService.pushTx(this.get('hex'));\n      }\n    });\n\n\n    return EscrowTransaction;\n  });",
    "define(\"meklebar/models/redemption_input\",\n  [\"meklebar/models/escrow_out\"],\n  function(EscrowOut) {\n    \"use strict\";\n\n    var RedemptionInput = Ember.Object.extend({\n      data: null,\n      hash: Ember.computed.alias('data.hash'),\n\n      escrowOut: function() {\n        var data = this.get('data');\n        if (!data) return;\n\n        var out = data.out.find(function(o) {\n          return o.scriptPubKey.match('OP_CHECKMULTISIG');\n        });\n\n        var newOut = JSON.parse(JSON.stringify(out));\n        newOut.index = data.out.indexOf(out);\n        newOut.hash = data.hash;\n\n        return EscrowOut.create({ data: newOut });\n      }.property('data.out.@')\n    });\n\n\n    return RedemptionInput;\n  });",
    "define(\"meklebar/models/redemption_tx\",\n  [\"meklebar/models/bitcoin_service\",\"meklebar/models/escrow_out\",\"meklebar/models/redemption_input\",\"meklebar/models/signature\"],\n  function(BitcoinService, EscrowOut, RedemptionInput, Signature) {\n    \"use strict\";\n\n    var RedemptionTx = Ember.Object.extend({\n      inputHash: null,\n      input: null,\n      address: null,\n      validAddress: Ember.computed.equal('address.length', 34),\n      validTx: Ember.computed.notEmpty('input.escrowOut'),\n      validRequest: Ember.computed.and('validTx', 'validAddress', 'allSigned'),\n\n      amount: Ember.computed.alias('input.escrowOut.amount'),\n      txIn: Ember.computed.alias('input.escrowOut.txIn'),\n      signaturesNeeded: Ember.computed.alias('input.escrowOut.signaturesNeeded'),\n      signers: Ember.computed.alias('input.escrowOut.signers'),\n\n      signerAddresses: function() {\n        var signers = this.get('signers');\n        if (!signers) return;\n\n        return signers.map(function(pk) {\n          return Bitcoin.Address.fromPubKey(pk).toString();\n        });\n      }.property('signers.@'),\n\n      receiverRole: function() {\n        var address = this.get('address');\n        var signers = this.get('signerAddresses');\n        if (Ember.isEmpty(address) || !signers) return;\n\n        var role;\n\n        switch (address) {\n          case signers[0]:\n            role = 'buyer';\n            break;\n          case signers[1]:\n            role = 'mediator';\n            break;\n          case signers[signers.length - 1]:\n            role = 'merchant';\n            break;\n        };\n\n        return role;\n      }.property('address', 'signerAddresses'),\n\n      receiverBuyer: Ember.computed.equal('receiverRole', 'buyer'),\n      receiverMediator: Ember.computed.equal('receiverRole', 'mediator'),\n      receiverMerchant: Ember.computed.equal('receiverRole', 'merchant'),\n\n      fee: function() {\n        return '0.0005';\n      }.property(),\n\n      amountWithoutFee: function() {\n        var amount = this.get('amount');\n        var fee = this.get('fee');\n        if (!amount) return 0;\n\n        amount = Bitcoin.Util.parseValue(amount);\n        fee = Bitcoin.Util.parseValue(fee);\n        return amount.subtract(fee).intValue();\n      }.property('amount', 'fee'),\n\n      bytePubKeys: function() {\n        var pubKeys = this.get('signers');\n        if (!pubKeys) return;\n\n        return pubKeys.map(function(key) {\n          return Crypto.util.hexToBytes(key);\n        });\n      }.property('signers'),\n\n      createSignature: function(number) {\n        var hash = this.get('hashForSignature');\n        var pubKeys = this.get('bytePubKeys');\n        if (!pubKeys || !hash) return;\n\n        return Signature.create({\n          hash: Crypto.util.hexToBytes(hash),\n          publicKeys: pubKeys,\n          number: number\n        });\n      },\n\n      signatures: function() {\n        var needed = this.get('signaturesNeeded');\n        var hash = this.get('hashForSignature');\n        var pubKeys = this.get('bytePubKeys');\n        var self = this;\n        if (!pubKeys || !hash) return;\n\n        var arr = !needed ? [] : new Array(needed).join(',').split(',');\n\n        return arr.map(function(_, index) {\n          return self.createSignature(index + 1);\n        });\n      }.property('signaturesNeeded', 'hashForSignature', 'bytePubKeys'),\n\n      moreThanOneSig: Ember.computed.gt('signatures.length', 1),\n\n      numSignedPubKeys: function() {\n        var signs = this.get('signatures');\n        if (!signs) return;\n\n        var publics = signs.map(function(s) {\n          return s.get('validPublic');\n        });\n\n        return publics.compact().uniq().length;\n      }.property('signatures.@each.validPublic'),\n\n      allSigned: function() {\n        var signed = this.get('numSignedPubKeys');\n        var needed = this.get('signaturesNeeded');\n\n        return signed === needed;\n      }.property('numSignedPubKeys', 'signaturesNeeded'),\n\n      txOut: function() {\n        var address = this.get('address');\n        var value = this.get('amountWithoutFee');\n        if (Ember.isEmpty(address) || !value) return;\n\n        var amount = Bitcoin.Util.amountToBytes(value);\n        var addr = new Bitcoin.Address(address);\n\n        return new Bitcoin.TransactionOut({\n          value: amount,\n          script: Bitcoin.Script.createOutputScript(addr)\n        });\n      }.property('address', 'amountWithoutFee'),\n\n      basicTx: function() {\n        var txIn = this.get('txIn');\n        var txOut = this.get('txOut');\n        if (!txIn || !txOut) return;\n\n        var tx = new Bitcoin.Transaction();\n        tx.addInput(txIn);\n        tx.addOutput(txOut);\n\n        return tx;\n      }.property('txIn', 'txOut'),\n\n      finalTx: function() {\n        var tx = this.get('basicTx');\n        if (!tx) return;\n        tx = tx.clone();\n\n        var signatures = this.get('signatures').map(function(s) {\n          return s.get('signature');\n        });\n\n        tx.ins[0].multiSignScript(signatures, tx, 0);\n\n        return tx;\n      }.property('basicTx', 'signatures.@each'),\n\n      hashForSignature: function() {\n        var tx = this.get('basicTx');\n        if (!tx) return;\n\n        var hash = tx.hashTransactionForSignature(tx.ins[0].script, 0, 1);\n        return Crypto.util.bytesToHex(hash);\n      }.property('basicTx'),\n\n      requestCode: function() {\n        var hash = this.get('input.hash');\n        var address = this.get('address');\n\n        if (!hash || !this.get('validAddress')) return;\n\n        var data = [hash, address].join(':');\n        return btoa(data);\n      }.property('input.hash', 'address'),\n\n      bbe: function() {\n        var tx = this.get('finalTx');\n        if (!tx) return;\n\n        var res = tx.toJSON();\n\n        return JSON.stringify(res, null, 2);\n      }.property('finalTx'),\n\n      hex: function() {\n        var tx = this.get('finalTx');\n        if (!tx) return;\n        return tx.hex();\n      }.property('finalTx'),\n\n      hash: function() {\n        if (!this.get('validRequest')) return;\n\n        var tx = this.get('finalTx');\n        return Crypto.util.bytesToHex(tx.getHash().reverse());\n      }.property('finalTx', 'validTx'),\n\n      blockchainUrl: function() {\n        var hash = this.get('hash');\n        if (!hash) return;\n\n        return BitcoinService.blockchainTxUrl(hash);\n      }.property('hash'),\n\n      fetchInput: function() {\n        // TODO don't set already redeemed transactions\n\n        var hash = this.get('inputHash');\n        var self = this;\n\n        if (Ember.isEmpty(hash) || hash.length !== 64) {\n          return this.set('input', null);\n        }\n\n        BitcoinService.txFromHash(hash).then(function(data) {\n          self.set('input', RedemptionInput.create({ data: data }));\n        }, function() {\n          self.set('input', null);\n          console.error(arguments);\n        });\n      }.observes('inputHash'),\n\n      sendTx: function() {\n        return BitcoinService.pushMultisigTx(this.get('hex'));\n      }\n    });\n\n\n    return RedemptionTx;\n  });",
    "define(\"meklebar/models/signature\",\n  [],\n  function() {\n    \"use strict\";\n    var Signature = Ember.Object.extend({\n      number: null,\n      hash: null,\n      eckey: null,\n      publicKeys: null,\n\n      label: function() {\n        return 'Signature #' + this.get('number');\n      }.property('number'),\n\n      placeholder: function() {\n        return 'Private key or signature #' + this.get('number');\n      }.property('number'),\n\n      validPublic: function() {\n        var hash = this.get('hash');\n        var signature = this.get('signature');\n        var keys = this.get('publicKeys');\n        if (!hash || Ember.isEmpty(signature) || !keys) return;\n\n        return keys.find(function(key) {\n          try {\n            return Bitcoin.ECDSA.verify(hash, signature, key);\n          } catch (err) {\n            return false;\n          }\n        });\n      }.property('hash', 'signature', 'publicKeys.@each'),\n\n      valid: Ember.computed.notEmpty('validPublic'),\n\n      signature: function(key, value, old) {\n        if (arguments.length === 1) {\n          var eckey = this.get('eckey');\n          var hash = this.get('hash');\n\n          if (eckey && hash) {\n            var signature = eckey.sign(hash);\n            signature.push(1);\n\n            return signature;\n          } else {\n            return old;\n          }\n        } else {\n          return value ? Crypto.util.hexToBytes(value) : null;\n        }\n      }.property('hash', 'eckey'),\n\n      hex: function() {\n        var signature = this.get('signature');\n        if (!signature) return;\n        return Crypto.util.bytesToHex(signature);\n      }.property('signature'),\n\n      signatureOrKey: function(key, value, old) {\n        if (arguments.length === 1) {\n          return old;\n        } else {\n          if (value.length === 51) {\n            this.set('signature', null);\n            this.set('eckey', new Bitcoin.ECKey(value));\n          } else if (value.length > 52) {\n            this.set('eckey', null);\n            this.set('signature', value);\n          } else {\n            this.set('eckey', null);\n            this.set('signature', null);\n          }\n\n          return value;\n        }\n      }.property()\n    });\n\n\n    return Signature;\n  });",
    "define(\"meklebar/router\",\n  [],\n  function() {\n    \"use strict\";\n    var Router = Ember.Router.extend(); // ensure we don't share routes between all Router instances\n\n    Router.map(function() {\n      this.resource('send');\n      this.resource('redeem');\n      this.resource('approve');\n    });\n\n\n    return Router;\n  });",
    "define(\"meklebar/routes/application\",\n  [],\n  function() {\n    \"use strict\";\n    var ApplicationRoute = Ember.Route.extend({\n      actions: {\n        openModal: function(modalName) {\n          return this.render(modalName, {\n            into: 'application',\n            outlet: 'modal'\n          });\n        },\n\n        closeModal: function() {\n          return this.disconnectOutlet({\n            outlet: 'modal',\n            parentView: 'application'\n          });\n        }\n      }\n    });\n\n\n    return ApplicationRoute;\n  });",
    "define(\"meklebar/routes/approve\",\n  [\"meklebar/models/redemption_tx\"],\n  function(RedemptionTx) {\n    \"use strict\";\n\n    var ApproveRoute = Ember.Route.extend({\n      model: function() {\n        return RedemptionTx.create();\n      }\n    });\n\n\n    return ApproveRoute;\n  });",
    "define(\"meklebar/routes/redeem\",\n  [\"meklebar/models/redemption_tx\"],\n  function(RedemptionTx) {\n    \"use strict\";\n\n    var RedeemRoute = Ember.Route.extend({\n      model: function() {\n        return RedemptionTx.create();\n      }\n    });\n\n\n    return RedeemRoute;\n  });",
    "define(\"meklebar/routes/send\",\n  [\"meklebar/models/escrow_transaction\",\"meklebar/models/address\"],\n  function(EscrowTransaction, Address) {\n    \"use strict\";\n\n    var SendRoute = Ember.Route.extend({\n      model: function() {\n        return EscrowTransaction.create({\n          source: Address.create(),\n          mediator: Address.create({ address: \"\" }),\n          receiver: Address.create({ address: \"\" })\n        });\n      }\n    });\n\n\n    return SendRoute;\n  });",
    "define(\"meklebar/utils/register_components\",\n  [],\n  function() {\n    \"use strict\";\n    /* global requirejs */\n    /* global require */\n\n    function registerComponents(container) {\n      var seen = requirejs._eak_seen;\n      var templates = seen, match;\n      if (!templates) { return; }\n\n      for (var prop in templates) {\n        if (match = prop.match(/templates\\/components\\/(.*)$/)) {\n          require(prop, null, null, true);\n          registerComponent(container, match[1]);\n        }\n      }\n    }\n\n\n    function registerComponent(container, name) {\n      Ember.assert(\"You provided a template named 'components/\" + name + \"', but custom components must include a '-'\", name.match(/-/));\n\n      var fullName         = 'component:' + name,\n          templateFullName = 'template:components/' + name;\n\n      container.injection(fullName, 'layout', templateFullName);\n\n      var Component = container.lookupFactory(fullName);\n\n      if (!Component) {\n        container.register(fullName, Ember.Component);\n        Component = container.lookupFactory(fullName);\n      }\n\n      Ember.Handlebars.helper(name, Component);\n    }\n\n\n    return registerComponents;\n  });",
    "define(\"meklebar/views/nav\",\n  [],\n  function() {\n    \"use strict\";\n    var NavView = Ember.View.extend({\n      didInsertElement: function() {\n        this.$('[data-toggle=collapse]').collapse();\n      }\n    });\n\n\n    return NavView;\n  });"
  ]
}